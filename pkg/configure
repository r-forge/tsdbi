#! /bin/sh

#   This script generates Makefile, Makevars and Makerules

version="QC Makefiles version 0.95"
opts="--help --copy-files --reconfigure --version"

usage="Usage: configure [--help] [--copy-files] [--reconfigure] [--version]"

#  this is changed to cp if --copy-files is specified
CPLN="ln -s "

#  If this is true then only the Makefiles are copied over, and everything else
#  is left  unchanged. It is changed  if --reconfigure is specified.
reconfigure=false

while test -n "${1}"; do
  case ${1} in
    -h|--help)
      echo "${usage}"; exit 0 ;;
    -v|--version)
      echo "${version}"; exit 0 ;;
    --copy-files)
      CPLN="cp "; shift ;;
    --reconfigure)
       reconfigure=true ; shift ;;
    ?*)  echo "${usage}"; exit 1 ;;
    *)   break ;;
  esac
done

# Find the source files, if location was not specified.
if test -z "$srcdir"; then
  ac_srcdir_defaulted=yes
  # Try the directory containing this script, then its parent.
  ac_confdir=`(dirname "$0") 2>/dev/null ||
$as_expr X"$0" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$0" : 'X\(//\)[^/]' \| \
	 X"$0" : 'X\(//\)$' \| \
	 X"$0" : 'X\(/\)' \| \
	 .     : '\(.\)' 2>/dev/null ||
echo X"$0" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{ s//\1/; q; }
  	  /^X\(\/\/\)[^/].*/{ s//\1/; q; }
  	  /^X\(\/\/\)$/{ s//\1/; q; }
  	  /^X\(\/\).*/{ s//\1/; q; }
  	  s/.*/./; q'`
  srcdir=$ac_confdir
  if test ! -r $srcdir/$ac_unique_file; then
    srcdir=..
  fi
else
  ac_srcdir_defaulted=no
fi


# a fully qualified srcdir is need since some targets change directories
srcdir=`cd $srcdir && pwd`
#echo srcdir $srcdir

# qc is the directory being configured for quality control tests.
qc=`pwd`
#echo qc     $qc

# packages will be in alphabetic order, which may not be preferred. 
# Override in Makevars.local if needed.

packages=`ls -d $srcdir/*/R | sed 's/\/R//g' |  sed 's/\(.*\)\///g'` 
bundles=`ls $srcdir/Bundles/*/Makefile | sed 's/\/Makefile//g'| \
    sed 's/\(.*\)\///g'` 

echo "creating $qc/Makevars ..."

touch Makevars

echo  MKDIR=mkdir -p              >>Makevars
echo  RM=rm -r -f                 >>Makevars
echo  PERL=perl                   >>Makevars

if test `uname` = "SunOS"  ; then 
 echo  SHELL=/usr/bin/bash        >>Makevars
 # this is a work around because Sun sh does not like to echo \b
 echo  ECHO=/usr/ucb/echo         >>Makevars
 echo  CP=cp               -r     >>Makevars
fi
if test `uname` = "Linux"  ; then 
 echo  SHELL=/bin/bash            >>Makevars
 echo  ECHO=echo                  >>Makevars
 # --dereference is needed so links are copied as files (otherwise 
 #         CVS  gets cobbered in build).
 echo  CP=cp --dereference -r     >>Makevars
fi

echo SRCDIR=$srcdir               >>Makevars
echo UTILS=$srcdir/Utils          >>Makevars
echo QC=$qc                       >>Makevars
echo PAC="\$(notdir \$(CURDIR))"  >>Makevars
# PAC and BUN are the same but get evaluated in different directories. It would
#  be possible to just use PAC, but that makes reading the Makefiles (for
#  bundles) less obvious.
echo BUN="\$(notdir \$(CURDIR))"  >>Makevars
echo ALLPACKAGES=$packages >>Makevars
echo PACKAGES="\$(filter-out \$(SKIPPAC), \$(ALLPACKAGES))" >>Makevars
# Note, if FLAGS or TMP are changed then CommonFiles/Rbuildignore should be too
echo FLAGS=FLAGS        >>Makevars
echo TMP=/tmp           >>Makevars
echo TST=TST            >>Makevars
echo RCODELIBS=$qc/Rcodelibs       >>Makevars
echo TESTLIB="\$(RCODELIBS)/\$(PAC)" >>Makevars
echo RLIBS=$qc/Rlibs         >>Makevars
echo TARBALLS=$qc/TARBALLS   >>Makevars

cat $srcdir/Makevars.in    >>Makevars
if test -f $srcdir/Makevars.local ; \
   then cat $srcdir/Makevars.local >>Makevars; fi


echo "creating $qc/Makefile ..."
cp $srcdir/Makefile.in    Makefile

echo "creating $qc/Makerules ..."
cp $srcdir/Makerules.in Makerules

echo "creating $qc/Makepac.Depends ..."
(cd $srcdir && grep "PREREQ_PACS=" */Makefile | \
         sed 's/\/Makefile:PREREQ_PACS=/: /g' | \
         sed 's/\(.*\)/\1; @$(MAKE) -C $@/g' >$qc/Makepac.Depends )

#         sed 's/\(.*\)/\1; cd $@ \&\& $(MAKE)/g' >$qc/Makepac.Depends )

# skip the rest if configuring in actual source directory 
# or if --reconfigure  has been specified
if test "x$srcdir" != "x$PWD" && test "x$reconfigure" = "xfalse" ; then 

   echo "creating $qc/ packages directories... $packages"
   
   for i in $packages ; do
      mkdir $qc/$i
      # these are copied since build does things in them (some arch specific)
      for d in inst src exec  ; do
        if test -d $srcdir/$i/$d; then cp -r $srcdir/$i/$d  $qc/$i/$d ; fi
        done
      rm -rf $qc/$i/inst/CVS  $qc/$i/inst/*/CVS  $qc/$i/src/CVS  $qc/$i/exec/CVS
      rm -rf $qc/$i/inst/.svn $qc/$i/inst/*/.svn $qc/$i/src/.svn $qc/$i/exec/.svn
      for f in `ls $i/inst/doc/*.*`  ; do
        rm -r $qc/$f
	ln -s $srcdir/$f  $qc/$f
	done
      for f in Makefile DESCRIPTION LICENSE NAMESPACE NEWS README  ; do
        if test -f $srcdir/$i/$f; then $CPLN $srcdir/$i/$f $qc/$i/$f ; fi
        done
      if test -f $srcdir/$i/Rbuildignore; then \
          $CPLN $srcdir/$i/Rbuildignore $qc/$i/.Rbuildignore ; fi
      for d in R tests demo data  ; do
        if test -d $srcdir/$i/$d; then $CPLN $srcdir/$i/$d  $qc/$i/$d ; fi
        done
      if  test  -d $srcdir/$i/mansrc
   	then $CPLN $srcdir/$i/mansrc $qc/$i/mansrc
   	else $CPLN $srcdir/$i/man    $qc/$i/man
   	fi 
        done
   
   if test -d $srcdir/Bundles  ; then 
      mkdir $qc/Bundles
      $CPLN $srcdir/Bundles/Makefile        $qc/Bundles/Makefile
      $CPLN $srcdir/Bundles/Makerules.bundle $qc/Bundles/Makerules.bundle
      fi
   
      echo "creating $qc/ bundle directories... $bundles"

      for i in $bundles ; do
   	 mkdir $qc/Bundles/$i
         for f in Makefile append.tex INDEX.preamble intro.tex \
	          titlePage.tex TOC.tex ; do
   	   $CPLN $srcdir/Bundles/$i/$f  $qc/Bundles/$i/$f
           done
         if test -f $srcdir/Bundles/$i/NEWS
	    then $CPLN  $srcdir/Bundles/$i/NEWS  $qc/Bundles/$i/NEWS ; fi
         done
   fi
