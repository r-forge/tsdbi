\documentclass[english]{article}
\newcommand{\code}{\emph}
\newcommand{\pkg}{\textsl}
\title{Time Series Database Interface: R fame (TSfame)}
\begin{document}
\maketitle
%\VignetteIndexEntry{TSfame Guide}
\SweaveOpts{eval=TRUE,echo=TRUE,results=hide,fig=FALSE}
%\SweaveOpts{eval=TRUE,echo=TRUE,results=verbatim,fig=TRUE}
\begin{Scode}{echo=FALSE,results=hide}
 options(continue="  ")
 options(warn=1)
\end{Scode}

\section{Introduction}
The code from the vignette that generates this guide can 
be loaded into an editor with \emph{edit(vignette("TSfame"))}.
This uses the default editor, which can be changed using \emph{options()}.
It should be possible to view the pdf version of the guide for this 
package with \emph{print(vignette("TSfame"))}.


WARNING: Running these example will overwrite a fame database called
''testvigFame.db''. Beware, if by any chance you have a database with this name.

Once R is started, the functions in this package are made available with

\begin{Scode}
library("TSfame")  
\end{Scode}
This will also load required packages \pkg{TSdbi}, \pkg{DBI}, \pkg{fame}, 
\pkg{methods}, and \pkg{tframe}. 
Some examples below also require \pkg{zoo}, and \pkg{tseries}.

The package \pkg{fame} may be installed but not functional because the Fame HLI
code is not available. A warning will be issues and the vignette example will
not work,

\section{Using the Database - TSdbi Functions}

This section gives several simple examples of putting series on and reading them
from the database. (If a large number of series are to be loaded into a database,
one would typically do this with a batch process in Fame.)
The first thing to do is to establish a connection to the database:

\begin{Scode}{results=hide}
con <- TSconnect("fame", dbname="testvigFame.db") 
\end{Scode}

(It is also possible to establish connections to Fame databases using Fame 
server. See the section ''Examples Using TSdbi with ets'' below for more 
details.)

This puts a series called \code{vec}  on the database and then reads is back. 
 
\begin{Scode}\begin{Scod
 z <- ts(rnorm(10), start=c(1990,1), frequency=1)
 seriesNames(z) <- "vec"
 if(TSexists("vec", con)) TSdelete("vec", con) 
 TSput( z, con)
 z <- TSget("vec", con)
\end{Scode}
If the series is printed it is seen to be a "ts" time series with some extra
attributes.

\code{TSput} fails if the series already exists on the \code{con}, 
so the above example checks and deletes the series if it already exists. 
\code{TSreplace} does not fail if the series does
not yet exist, so examples below use it instead. Several plots below show
original data and the data retrieved after it is written to the database. One is
added to the original data so that both lines are visible.

And now more examples:

\begin{Scode}{results=verbatim,fig=TRUE}
 z <- ts(matrix(rnorm(20),10,2), start=c(1990,1), frequency=1)
 seriesNames(z) <- c("matc1", "matc2")
 TSreplace(z, con)
 TSget("matc1", con)
 TSget("matc2", con)
 TSget(c("matc1","matc2"), con)
 tfplot(z+1, TSget(c("matc1","matc2"), con), 
          lty=c("solid", "dashed"), col=c("black", "red"))
\end{Scode}

\begin{Scode}{results=verbatim,fig=TRUE}
 z <- ts(matrix(rnorm(20),10,2), start=c(1990,1), frequency=4)
  seriesNames(z) <- c("matc1", "matc2")
 TSreplace(z, con)
 TSget(c("matc1","matc2"), con)
 tfplot(z+1, TSget(c("matc1","matc2"), con),
          lty=c("solid", "dashed"), col=c("black", "red"))
\end{Scode}

\begin{Scode}{results=verbatim,fig=TRUE}
 z <- ts(matrix(rnorm(200),100,2), start=c(1995,1), frequency=12)
  seriesNames(z) <- c("mat2c1", "mat2c2")
 TSreplace(z, con)
 tfplot(z+1, TSget(c("mat2c1","mat2c2"), con),
           lty=c("solid", "dashed"), col=c("black", "red"))
\end{Scode}
 
The following extract information about the series from the database, although
not much information has been added for these examples. 
\begin{Scode}
 TSmeta("mat2c1", con)
 TSmeta("vec", con)
 TSdates("vec", con)
 TSdescription("vec", con)
 TSdoc("vec", con)
\end{Scode}

Below are examples that make more use of \code{TSdescription} and code{TSdoc}.

Often it is convenient to set the default connection:

\begin{Scode}
 options(TSconnection=con)
\end{Scode}
and then the \code{con} specification can be omitted from the function calls
unless another connection is needed. The \code{con} can still be specified, and
some examples below do specify it, just to illustrate the alternative syntax.

\begin{Scode}{results=verbatim}
 z <- TSget("mat2c1") 
 TSmeta("mat2c1")
\end{Scode}


Data documentation can be in two forms, a description specified by 
\code{TSdescription}
or longer documentation specified by \code{TSdoc}. These can be added to the time
series object, in which case they will be written to the database when
\code{TSput} or \code{TSreplace} is used to put the series on the database. 
Alternatively, they
can be specified as arguments to \code{TSput} or \code{TSreplace}.
The description or documentation will be retrieved as part of the series object
with \code{TSget} only if this is specified with the logical arguments
\code{TSdescription} and \code{TSdoc}. They can also be retrieved directly from the
database with the functions \code{TSdescription} and \code{TSdoc}.

\begin{Scode}{results=verbatim,fig=TRUE}
 z <- ts(matrix(rnorm(10),10,1), start=c(1990,1), frequency=1)
 TSreplace(z, serIDs="Series1", con) 
 zz <- TSget("Series1", con)
 TSreplace(z, serIDs="Series1", con, 
     TSdescription="short rnorm series", 
     TSdoc="Series created as an example in the vignette.")
 zz <- TSget("Series1", con, TSdescription=TRUE, TSdoc=TRUE)
 start(zz)
 end(zz)
 TSdescription(zz)
 TSdoc(zz)

 TSdescription("Series1", con)
 TSdoc("Series1", con)

 z <- ts(rnorm(10), start=c(1990,1), frequency=1)
 seriesNames(z) <- "vec"
 TSreplace(z, con)
 zz <- TSget("vec", con)

 z <- ts(matrix(rnorm(20),10,2), start=c(1990,1), frequency=1)
 seriesNames(z) <- c("matc1", "matc2")
 TSreplace(z, con) 
 tfplot(z+1, TSget(c("matc1","matc2"), con),
           lty=c("solid", "dashed"), col=c("black", "red"))
\end{Scode}

\begin{Scode}{results=verbatim,fig=TRUE}
 z <- ts(matrix(rnorm(20),10,2), start=c(1990,1), frequency=4)
 seriesNames(z) <- c("matc1", "matc2")
 TSreplace(z, con)
 tfplot(z+1, TSget(c("matc1","matc2"), con),
           lty=c("solid", "dashed"), col=c("black", "red"))
\end{Scode}

\begin{Scode}{results=verbatim,fig=TRUE}
 z <- ts(matrix(rnorm(200),100,2), start=c(1995,1), frequency=12)
 seriesNames(z) <- c("mat2c1", "mat2c2")
 TSreplace(z, con) 
 tfplot(z+1, TSget(c("mat2c1","mat2c2"), con),
           lty=c("solid", "dashed"), col=c("black", "red"))
\end{Scode}

The following examples use dates and times which are not handled by \code{ts},
so the \pkg{zoo} time representation is used.

\begin{Scode}{results=verbatim,fig=TRUE}
require("zoo") 

 z <- zoo(matrix(rnorm(200),100,2), as.Date("1990-01-01") + 0:99)
  seriesNames(z) <- c("zooc1", "zooc2")
 TSreplace(z, con)
 tfplot(z+1, TSget(c("zooc1","zooc2"), con),
           lty=c("solid", "dashed"), col=c("black", "red"))  
\end{Scode}

Beware that (as of Dec, 2010) there is a bug with weekly dates:
\begin{Scode}{results=verbatim,fig=FALSE}
 z <- zoo(matrix(rnorm(200),100,2), as.Date("1990-01-01") + 0:99 * 7)
  seriesNames(z) <- c("zooWc1", "zooWc2")
 TSreplace(z, con)
 z2 <- TSget(c("zooWc1","zooWc2"), con)
 time(z)
 time(z2)
\end{Scode}

and while this works:
\begin{Scode}{results=verbatim,fig=TRUE}
 tfplot(z2)
\end{Scode}

this may not:
\begin{Scode}{results=verbatim,fig=TRUE}
 tfplot(z+1, z2, col=c("black", "red"), lty=c("dashed", "solid"))  
\end{Scode}


\section{Examples Using Web Data}

This section illustrates fetching data from a web server and loading it into the
database. This would be a very slow way to load a database, but provides
examples of different kinds of time series data. The fetching is done with 
\pkg{TShistQuote} which provides a wrapper for \code{get.hist.quote} from 
package \pkg{tseries} to give syntax consistent with the \pkg{TSdbi}.

Fetching data may fail due to lack of an Interenet connection or delays. 

The connection \code{con} established above to the database will be used to
save data but, to make the use of the two connections more obvious, neither will 
be set as the default:
\begin{Scode}
 options(TSconnection=NULL)
\end{Scode}

Now connect to the web server and fetch data:

\begin{Scode}{results=verbatim}
  require("TShistQuote")
  Yahoo <- TSconnect("histQuote", dbname="yahoo") 
  x <- TSget("^gspc", quote = "Close", con=Yahoo)
  plot(x)
  tfplot(x)

  TSrefperiod(x) 
  TSdescription(x) 
  TSdoc(x) 
\end{Scode}

Then write the data to the local server, specifying table B for business day 
data (using TSreplace in case the series
is already there from running this example previously):

\begin{Scode}{results=verbatim}
   TSreplace(x,  serIDs="gspc", Table="B", con=con)
\end{Scode}

and check the saved version:

\begin{Scode}{results=verbatim,fig=TRUE}
  TSrefperiod(TSget(serIDs="gspc", con=con)) 
  TSdescription("gspc", con=con) 
  TSdoc("gspc", con=con)
  tfplot(TSget(serIDs="gspc", con=con))
\end{Scode}

\begin{Scode}{results=verbatim,fig=TRUE}
   x <- TSget("ibm", quote = c("Close", "Vol"), con=Yahoo)
   TSreplace(x, serIDs=c("ibm.Cl", "ibm.Vol"),  con=con, Table="B",
              TSdescription.=c("IBM Close","IBM  Volume"),
	      TSdoc.= paste(c(
	         "IBM  Close   retrieved on ",
		 "IBM  Volume retrieved  on "), Sys.Date()))

   z <- TSget(serIDs=c("ibm.Cl", "ibm.Vol"), 
             TSdescription=TRUE, TSdoc=TRUE, con=con)
   TSdescription(z)
   TSdoc(z)
   tfplot(z, xlab = TSdoc(z), Title = TSdescription(z))
   tfplot(z, Title="IBM", start="2007-01-01")
\end{Scode}

\begin{Scode}{results=hide}
  dbDisconnect(con)
  dbDisconnect(Yahoo)
\end{Scode}


\subsection{Examples Using TSdbi with ets}

These examples use a database called "ets" which is available at the Bank
of Canada.
This set of examples illustrates how the programs might be used if a larger
database is available. Typically a large database would be installed using
database scripts directly rather than from R with \code{TSput} or
\code{TSreplace}. 

The following are wrapped in \code{if (!inherits(con, "try-error"))} so that
the vignette will build even when the database is not available. This seems to
require an explicit call to \code{print()}, but that is not usually needed to
display results below. Another artifact of this is that results printed in the
\code{if} block do not display until the end of the block.

\begin{Scode}{results=verbatim,fig=FALSE}
  conets <- try(TSconnect("fame", dbname="ets /home/ets/db/etsintoecd.db",
                  accessMode="read")) 
  if (!inherits(conets, "try-error")) { 
    print(TSmeta("M.SDR.CCUSMA02.ST", con=conets))
  }
\end{Scode}
The above connection is recognized to be a server because of the white space
between ''ets'' and the database name. This produces a warning message from the
\pkg{fame} package call, because it is guessing that a Fame server call is 
intended. An alternative way to establish the 
connnection is to explicitely indicate that the server functionality is to be 
used:
\begin{Scode}{results=verbatim,fig=FALSE}
  conServer <- try(
    TSconnect("fameServer", dbname="/home/ets/db/etsintoecd.db",
       service = "2959", host = "ets", user="", password="",stopOnFail = TRUE)) 

  if (!inherits(conServer, "try-error")) { 
    print(TSmeta("M.SDR.CCUSMA02.ST", con=conServer))
  }
\end{Scode}

This does not give the warning message, and for that reason will be used below, 
but they are interchangable.

\begin{Scode}{results=verbatim,fig=TRUE}
  if (!inherits(conServer, "try-error")) {
  
  options(TSconnection=conServer)

  print(TSmeta("M.SDR.CCUSMA02.ST"))

  EXCH.IDs <- t(matrix(c(
 	"M.SDR.CCUSMA02.ST",	 "SDR/USD exchange rate",
 	"M.CAN.CCUSMA02.ST",	 "CAN/USD exchange rate",
 	"M.MEX.CCUSMA02.ST",	 "MEX/USD exchange rate",
 	"M.JPN.CCUSMA02.ST",	 "JPN/USD exchange rate",
 	"M.EMU.CCUSMA02.ST",	 "Euro/USD exchange rate",
 	"M.OTO.CCUSMA02.ST",	 "OECD /USD exchange rate",
 	"M.G7M.CCUSMA02.ST",	 "G7   /USD exchange rate",
 	"M.E15.CCUSMA02.ST",	 "Euro 15. /USD exchange rate"
	), 2, 8))

  print(TSdates(EXCH.IDs[,1]))
  z <- TSdates(EXCH.IDs[,1])
  print(start(z))
  print(end(z))
   
  tfplot(TSget(serIDs="M.CAN.CCUSMA02.ST", conServer), 
      ylab="CDN dollors per US dollar",
      Title="Canada - U.S. Exchange Rate")
  }
\end{Scode}


\begin{Scode}{results=verbatim,fig=TRUE}
if (!inherits(conServer, "try-error")) {
  print(TSdescription(TSget("M.CAN.CCUSMA02.ST", TSdescription=TRUE)))
  print(TSdescription("M.CAN.CCUSMA02.ST"))

  print(TSdoc(TSget("M.CAN.CCUSMA02.ST", TSdoc=TRUE)))
  print(TSdoc("M.CAN.CCUSMA02.ST"))

  tfplot(TSget("M.CAN.CCUSMA02.ST", names="M.CAN.CCUSMA02.ST", conServer))
  }
\end{Scode}

\begin{Scode}{results=verbatim,fig=TRUE}
if (!inherits(conServer, "try-error")) {
  z <- TSget("M.CAN.CCUSMA02.ST", TSdescription=TRUE)
  tfplot(z, Title=strsplit(TSdescription(z), "//")[[1]][1:2])
  }
\end{Scode}

\begin{Scode}{results=verbatim,fig=TRUE}
if (!inherits(conServer, "try-error")) {
  plot(z)
  }
\end{Scode}
  
\begin{Scode}{results=hide}
  if (!inherits(conServer, "try-error")) {
  options(TSconnection=NULL)
  }  # end if try-error
\end{Scode}

Finally, dbDisconnect closes the connection if it is a Fame Server connect, and
does nothing otherwise, but is provided for compatability with other connections.

\begin{Scode}{results=hide}
dbDisconnect(conets)
dbDisconnect(conServer)
dbDisconnect(con)
options(TSconnection=NULL)
\end{Scode}

A simple mechanism for accessing vintages of data stored in 
different Fame databases is available as illustrated by the following examples. 

\begin{Scode}{results=verbatim,fig=TRUE}
  dbs <- paste("ets /home/ets5/mfadata/etsmfacansim_", c(
             "20110513.db", "20060526.db", "20110520.db"), sep="")
  names(dbs) <- c("2011-05-13", "2006-05-26", "2011-05-20")
	     
  conetsV <- try(TSconnect("fame", dbname=dbs, "read", current="2011-05-13")) 

  if (!inherits(conetsV, "try-error")) {   
   z <- TSget("V122646", con=conetsV, vintage=c("2011-05-13", "2006-05-26"))
   tfplot(z)
   options(TSconnection=conetsV)
   z <- TSget("V122646") 
   z <- TSget(c("V122646", "V122647")) 
   tfplot(z)
   dbDisconnect(conetsV)
  }
\end{Scode}

\begin{Scode}{results=verbatim,fig=TRUE}
  dbs <- paste("/home/ets5/mfadata/etsmfacansim_", c(
             "20110513.db", "20060526.db", "20110520.db"), sep="")
  names(dbs) <- c("2011-05-13", "2006-05-26", "2011-05-20")

  conServerV <- try( TSconnect("fameServer", dbname=dbs, 
            service = "2959", host = "ets", stopOnFail = TRUE)) 

  if (!inherits(conServerV, "try-error")) { 
   r <- TSget("V122646", con=conServerV, vintage=c("2011-05-13", "2006-05-26"))
   tfplot(r)
   dbDisconnect(conServerV)
    
  }
\end{Scode}
\end{document}
