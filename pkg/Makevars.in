#  configure uses this file to generate Makevars which is included
#     in the Makefile in each package testing directory.

#################################################################
#
#  Most Local Setup should be done in the file Makevars.local
#   and it is better to make local setup changes there.
#
#################################################################

R_HOME=${shell echo "Sys.getenv('R_HOME'); q()" |  R --slave | sed -n '2s/ //p'| sed -n 's/"//gp'}

R_VER=${shell R --slave --version | sed -n '1s/ /-/; 1s/ .*//p' }


#################################################################
#
#                Additional Local Setup              
#
#   This section can be changed, but need not be.
#
#################################################################


# PREFIX-SITE is for installing fully tested versions for system wide use. 

PREFIX-SITE=$(R_HOME)/site-library


# SRCDIR (set by configure) is the location of package source directories.

# Testing is done using $(RCODELIBS). i.e. interdependancies of code in packages
#  will be be tested by installing tested packages here and using this as the
#  package library for testing other packages.  


#Final build and check of tarballs is done in TST.

# PREFIX is for installing versions for personal regular use. 
# This could be distinguished from PREFIX-SITE. I tend to have my own copy of
#  R (since I often play with a version not yet installed for site wide use)
#  and thus R_HOME points to my own copy, and there is not much point in making
#  a further distinction for my installed packages.
PREFIX=$(R_HOME)/site-library

# Vignette sources
VIGNSTEX=${shell cd $(SRCDIR)/$(PAC)/inst/doc ; ls *.Stex }


#SWEAVE indicates location of latex sty for generating pdf
SWEAVE=$(R_HOME)/share/texmf/Sweave


#The names for some tools have changed in different R versions. This is
# pretty old, but illustrates the mechanism for handling name changes in the
# tools without having two versions of the Makefiles.
#ifeq (${shell cat $R/VERSION}, 1.7.1 Patched)
#   CODESCAN=checkFF checkMethods checkAssignFuns
#   DOC=undoc checkDocArgs codoc help examples latex $(DEMOS:%=$(FLAGS)/demo/%) checkDocStyle   
#   TMPSEARCH=zzzzzzz
#else

#Use real targets here, not shortcuts (eg $(DEMOS:%=$(FLAGS)/demo/%) not demos),
#   or the up-to-date check will fail.
   CODESCAN=checkFF  checkReplaceFuns 
   DOC=$(DEMOS:%=$(FLAGS)/demo/%)    
   TMPSEARCH=without usage


#  The vignettes target could be part of doc, but in R 1.7.0 vignettes 
#  provoked a segfault so were done at the end.

VIGNETTES=checkVignettes pdfVignettes


# The default order should not be too important. Everything should get done if
# "tar" is the default, because the flow is really controlled by target prereqs.
#The logical order is: $(CODESCAN) codetest $(CODETEST) $(DOC) $(VIGNETTES) tar
# $(CODETEST) target puts a tested working version in a testing lib that 
#    other packages use.

# The "must remake" messages are a bit clearer if tar is expanded as a
#   variable rather than setting a nickname target tar: ...

TAR=$(TARBALLS)/$(PAC).tar.gz
DEFAULT=$(TAR)

.PHONY:	$(PACKAGES)

CODE=${shell  test -d R      && (ls R/*.[rR] ) }
TESTS=${shell test -d tests  && (cd tests; ls *.[rR] ) }
DEMOS=${shell test -d demo   && (cd demo; ls *.[rR] ) }

# VPATH indicates locations to search to determine if targets are up to date.
VPATH=$(FLAGS):$(RCODELIBS)

# CODE_PREREQS are for $(CODETEST) targets (not doc targets)
# INDEX gets regenerated my man changes, so should not be a prereq for code
# it would be better if this had only $(CODE) $(TESTS) as prereqs but
# currently running tests involes installing, which needs the rest. This has the
#  unfortunate effect that changing the version number results in a complete
#  remake of everything. A way around this might be to remove LICENSE and 
#  DESCRIPTION from prereqs (CODE_PREREQS) and if it is missing build it specially
#  in the testLibMacro. However, version checking of packages would cause 
#  this to fail if an old DESCRIPTION file indicates an old version.
# NAMESPACE here means namespaces must be implemented in all packages.

CODE_PREREQS=$(CODE) LICENSE DESCRIPTION NAMESPACE #INDEX

#  for debugging it is sometimes useful to change
#ECHOLINE="<<<<"$(shell date)">>>> making $(PAC)/$@, changed prereqs $? ..."
ECHOLINE="<<<<"$(shell date)">>>> making $(PAC)/$@"

# This is for doing timing comparisons. When using this it is necessary to 
#    mkdir $(RCODELIBS)) 
# before running make
TIMELINE=; echo $(shell uname -n) $(shell date "+%Y/%m/%d %H:%M:%S.%N %Z") \
  " starting $@ $(PAC) [in $(QC)]"  >>$(QC)/TIMING
TIMELINE2= echo $(shell uname -n) $(shell date "+%Y/%m/%d %H:%M:%S.%N %Z") \
  " finished $@ $(PAC) [in $(QC)]"  >>$(QC)/TIMING
